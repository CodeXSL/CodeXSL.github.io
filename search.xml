<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[log4j的使用]]></title>
    <url>%2F2019%2F04%2F21%2FXML%E5%8F%8Adom4j%2F</url>
    <content type="text"><![CDATA[dom4j是一个Java的XML API，是jdom的升级品，用来读写XML文件的。dom4j是一个十分优秀的JavaXML API，具有性能优异、功能强大和极其易使用的特点，它的性能超过sun公司官方的dom技术，同时它也是一个开放源代码的软件，可以在SourceForge上找到它。 XMLXML简介 xml, eXtensible Markup Language, 可扩展标记语言.是一种标记语言. xml 是一种非常灵活的语言, 没有固定的标签, 所有的标签都可以自定义. 通常, xml 被用于信息的记录和传递. 因此, xml 经常被用于充当配置文件. 良好的XML格式 声明信息, 用于描述xml 的版本和编码方式&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; xml 有且仅有一个根元素 xml 是大小写敏感的 标签是成对的, 而且要正确嵌套 属性值要使用双引号1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- 这里是注释--&gt;&lt;books&gt; &lt;book id=&quot;b01&quot;&gt; &lt;name&gt;java高级编程&lt;/name&gt; &lt;author&gt;张三&lt;/author&gt; &lt;price&gt;50.5&lt;/price&gt; &lt;/book&gt; &lt;book id=&quot;b02&quot;&gt; &lt;name&gt;java中级编程&lt;/name&gt; &lt;author&gt;李四&lt;/author&gt; &lt;price&gt;30.5&lt;/price&gt; &lt;/book&gt;&lt;/books&gt; DTDDTD简介 DTD, Document Type Definition, 文档类型定义 DTD 用于约束xml 的文档格式, 保证xml 是一个有效的xml. DTD 可以分为两种, 内部DTD, 外部DTD 使用DTD 内部DTD定义 语法如下 &lt;!DOCTYPE 根元素[元素声明]&gt; 元素声明语法: &lt;!ELEMENT 元素名(子元素, 子元素...)&gt; 数量词+: 表示出现1 次或多次, 至少一次?: 表示出现0 次或1 次*: 表示出现任意次 属性声明语法:属性类型: CDATA, 表示字符数据(character data)默认值: #REQUIRED, 表示必须出现 #IMPLIED, 表示不是必须的&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt; 带DTD 的完整xml 代码:123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE scores [ &lt;!ELEMENT scores (student+)&gt; &lt;!ELEMENT student (name, course, score)&gt; &lt;!ATTLIST student id CDATA #REQUIRED&gt; &lt;!ELEMENT name (#PCDATA)&gt; &lt;!ELEMENT course (#PCDATA)&gt; &lt;!ELEMENT score (#PCDATA)&gt;]&gt;&lt;scores&gt; &lt;student id=&quot;1&quot;&gt; &lt;name&gt;王同&lt;/name&gt; &lt;course&gt;java&lt;/course&gt; &lt;score&gt;89&lt;/score&gt; &lt;/student&gt; &lt;student id=&quot;2&quot;&gt; &lt;name&gt;李佳&lt;/name&gt; &lt;course&gt;sql&lt;/course&gt; &lt;score&gt;58&lt;/score&gt; &lt;/student&gt;&lt;/scores&gt; 外部DTD 的定义 创建一个独立的dtd 文件 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!ELEMENT scores (student+)&gt;&lt;!ELEMENT student (name, course, score)&gt;&lt;!ATTLIST student id CDATA #REQUIRED&gt;&lt;!ELEMENT name (#PCDATA)&gt;&lt;!ELEMENT course (#PCDATA)&gt;&lt;!ELEMENT score (#PCDATA)&gt; 在xml 中引入外部DTD 文件 12&lt;!-- 引入外部DTD文件--&gt;&lt;!DOCTYPE scores SYSTEM &quot;scores.dtd&quot;&gt; XML的解析对xml 文件进行操作, 包括创建xml, 对xml 文件进行增删改查操作. 常见的xml 解析技术 DOM 解析是官方提供的解析方式, 基于xml 树解析的 SAX 解析是民间的解析方式, 基于事件的解析 JDOM 解析第三方提供, 开源免费的解析方式, 比DOM 解析快 DOM4J第三方提供, 开源免费, 是JDOM 的升级版 DOM4J解析XML需要导入dom4j 的jar 包, 解析xml 的入口, 是需要先拿到一个Document 对象 读取xml 文件中的信息 1234567891011121314151617181920212223242526272829public class TestXml &#123; public static void main(String[] args) throws Exception &#123; // [1] 创建SAXReader对象, 用于读取xml文件 SAXReader reader = new SAXReader(); // [2] 读取xml文件, 得到Document对象 Document doc = reader.read(new File(&quot;src/scores2.xml&quot;)); // [3] 获取根元素 Element root = doc.getRootElement(); // [4] 获取根元素下所有子元素 Iterator&lt;?&gt; it = root.elementIterator(); while(it.hasNext()) &#123; // 取出元素 Element e = (Element) it.next(); System.out.println(e.getName()); // 获取id属性 Attribute id = e.attribute(&quot;id&quot;); System.out.println(id.getName() + &quot;=&quot; + id.getValue()); // 获取student的子元素 Element name = e.element(&quot;name&quot;); Element course = e.element(&quot;course&quot;); Element score = e.element(&quot;score&quot;); // 打印 System.out.println(name.getName()+ &quot;=&quot; + name.getStringValue()); System.out.println(course.getName() + &quot;=&quot; + course.getText()); System.out.println(score.getName() + &quot;=&quot; + score.getText()); System.out.println(&quot;--------------------------------------&quot;); &#125; &#125;&#125; 生成xml 文件 123456789101112131415161718192021222324252627public class TestXml2 &#123; public static void main(String[] args) throws Exception &#123; // [1] 通过DocumentHelper生成一个Document对象 Document doc = DocumentHelper.createDocument(); // [2] 添加并得到根元素 Element root = doc.addElement(&quot;books&quot;); // [3] 为根元素添加子元素 Element book = root.addElement(&quot;book&quot;); // [4] 为book元素添加属性 book.addAttribute(&quot;id&quot;, &quot;b01&quot;); // [5] 为book添加子元素 Element name = book.addElement(&quot;name&quot;); Element author = book.addElement(&quot;author&quot;); Element price = book.addElement(&quot;price&quot;); // [6] 为子元素添加文本 name.addText(&quot;Thinking in Java&quot;); author.addText(&quot;小伟&quot;); price.addText(&quot;88&quot;); // [7] 格式良好的输出 OutputFormat format = OutputFormat.createPrettyPrint(); XMLWriter writer = new XMLWriter(new FileWriter(new File(&quot;src/book2.xml&quot;)), format); writer.write(doc); / [8] 关闭资源 writer.close(); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vim的使用]]></title>
    <url>%2F2019%2F04%2F07%2FVim%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。 VIM是自由软件。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999 年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs在文本编辑方面都是非常优秀的。 Vim三种模式（重点）vim存在三种模式：命令模式、编辑模式、末行模式 命令模式：在该模式下是不能对文件直接编辑的，可以输入快捷键进行一些操作。（删除行、复制行、移动光标、黏贴）*默认进入 编辑模式：在该模式下可以对文件进行编辑 末行模式：可以在末行输入命令对文件进行操作。（搜索、替换、保存、退出、撤销） Vim打开文件的方式（4种） #vim 文件路径 打开指定的文件 #vim +数字 文件的路径 作用：打开指定的文件，并且将光标移动到指定行 #vim +/关键词 文件路径 作用：打开指定的文件，并且高亮显示关键词 #vim 文件路径1 文件路径2 文件路径3 作用：同时打开多个文件 退出方式：输入 ctrl + : q 命令模式 光标移动 1.光标移动到行首 按键：shift + 6(^) 2.光标移动到行尾 按键：shift + 4($) 3.光标移动到首行 按键：gg 4.光标移动到末行 按键：G 5.翻屏 向上翻：ctrl + b(back) 向下翻：ctrl + f（forward） 复制 1.复制光标所在行 按键：yy 黏贴：在想要黏贴的位置按下p 2.以光标所在行为准，向下复制指定的行数 按键：数字 yy 黏贴：p 3.可视化复制 按键：ctrl + v,然后按下↓ ↑ ← →来选中需要；按下yy键进行复制，按下p黏贴 剪切/删除 1.剪切/删除光标所在行 按键：dd（删除之后下一行上移） 注意：dd严格意义上说是剪切命令 2.剪切/删除光标所在行为准，向下删除/剪切指定行 按键： 数字 dd 3.剪切/删除光标所在行，但光标不上移 按键：D（当前行会变成空白行） 撤销/恢复 撤销： u 连续U可以连续撤销 恢复： ctrl + r 恢复之前的撤销 扩展 1.快速将光标移动到指定行 按键：数字 G 2.以当前光标为准向上/向下移动n行 按键：数字↑，数字↓ 3.以当前光标为准向左/右移动n个字符 按键：数字←，数字→ 末行模式进入方式：由命令模式进入，按下：”:”即进入退出方式：按下esc/按2次esc键 1.保存：w 保存文件 2.退出：q 退出文件 3.强制退出：q! 4.保存并退出： wq 5.搜索：进入末行模式/ /关键词 （在搜素结果中切换上/下一个结果：N/n） 如果需要取消高亮，则需要输入：nohl 6.替换 ：s/搜索的关键词/新的内容 作用：替换光标所在行的第一处符合条件的内容 ：s/搜索的关键词/新的内容/g 作用：替换光标所在行的全部符合条件的内容 ：%s/搜索的关键词/新的内容 作用：替换整个文档中的每行第一个符合条件的内容 ：%s/搜搜的关键词/新的内容/g 作用:替换文中的所有内容 7.显示行号（临时显示） ：set nu 如果不想取消显示，则输入：set nonu 8.扩展 使用Vim同时打开多个文件，在末行模式下进行切换文件 查看当前已经打开的文件名称：“：files&quot; a.如果需要制定切换文件的名称，则可以输入：open group 文件名称 b.可通过其他命令来切换上一个文件/下一个文件 输入：bn 切换到下一个文件 （back next） :bp 切换到上一个文件 （back previous） 编辑模式进入 i在光标所在字符前开始插入 a在光标所在字符后面开始插入 实用功能1.代码着色（如何控制着色显示与否） 显示：syntax on 关闭：syntax off 2.vim中计算器的使用 a.进入编辑模式 b.按下ctrl + r 然后输入= c.输入要计算的内容 扩展1.vim的配置（重点） vim的配置有三种情况 a.在文件打开的时候在末行模式下输入的配置（临时） b.个人配置文件（/.vimrc)自己的家目录，如果没有自己新建 touch .vimrc c.全局配置文件 （vim自带，/etc/vimrc) eg:新建好个人配置文件之后进入编辑 在配置文件中进行配置 比如显示行号： set nu syntax off 全局配置和个人配置冲突，则以个人配置为准 2.异常退出 在编辑文件之后并没有正常的wq(保存退出) 解决办法：将交换文件（在编辑过程中产生的临时文件）删除即可 rm -f .passwd.swp 回车 3.别名机制 作用：相当于创建一些属于自己的命令 别名机制依靠一个别名映射文件 ~/.bashrc （当前用户下） alias cls = &apos;clear&apos; 需要重新登录当前用户 4.退出方式 vim 中退出vim ：q 或者：wq vim还支持另一个保存退出方法 ：x(没有修改，退出不会修改文件时间) *X对文件加密（保存生效）]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux目录结构]]></title>
    <url>%2F2019%2F04%2F04%2FLinux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[这里是Linux的系统文件的目录结构，了解系统目录结构对Linux的学习尤为重要。 Linux系统文件Linux的目录结构 Bin:全称binary。该目录中存储的是一些二进制文件，文件都是可以运行的。 Dec：该目录中主要存放时外界设备，例如硬盘。在其中的外接设备是不能直接使用的，需要挂载（分配盘符）。 Etc:该目录主要是存放一些配置文件。 Home：表示“家”，表示出了root用户以外的其他用户的家目录。 proc:该目录中存储的是Linux运行时候的进程。 Root:该目录root用户自己的家目录。 Sbin：全称super binary,该目录存储一些可以被执行的二进制文件，但是必须得有super权限的用户才能执行。 temp:表示“临时的”，当系统运行时候产生的临时文件都会在这个目录下存着。 User:存放的是用户自己安装的软件。 Var: 存放的是程序/系统的日志文件目录。 mnt:当外接设备需要挂载的时候，就需要挂载到mnt目录下。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux 目录结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用指令]]></title>
    <url>%2F2019%2F04%2F03%2FLinux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Linux的基本指令，方便自己查阅。 Linux的基本指令基础指令 ls指令（list） 语法1： #ls 作用： 列出当前工作目录下的所有文件/文件夹的名称。 语法2： #ls 路径 作用： 指定工作目录下的所有文件/文件夹的名称。 语法3：#ls 选项 路径 作用：列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。 age: #ls -l 路径 #ls -la 路径 （包括隐藏文件） 语法4：#ls -lh 路径 作用：列出指定路径下的所有文件夹的名称，以列表的形式并且在显示文档大小的时候以可读性较高的形式显示。 **列表的第一列字符表示文档的类型，其中&quot;-&quot;表示文件，&quot;d&quot;表示文件夹，在linux中隐藏文档一般以&quot;.&quot;开头。** pwd指令 语法：#pwd 作用：打印当前的工作目录 cd指令 语法：#cd 路径 作用：用于切换当前工作目录 在linux中有一个特殊的符号&quot;~&quot;，表示当前用户的家目录 #cd ~ mkdir指令 （make directory) 创建目录 语法1：#mkdir 路径 作用：在该路径下创建一个目录 注意：ls列出结果的颜色说明，其中蓝色文件表示文件夹，黑色的表示文件，卢瑟的其权限为拥有所有权限 语法2：#mkdir -p 路径 作用：当一次性创建多层不存在的目录的时候，添加-p选项，负责会报错 语法3：#mkdir 路径1 路径2 路径3... 作用：一次创建多个目录 touch指令 语法1：#touch 文件路径 作用：在指定的目录下新建一个文件 语法2：#touch 文件1 文件2 文件3 作用：一次性创建多个文件 cp (可以复制并同时改名) 语法：#cp 被复制文件路径 文件被复制到的路径 注意：当使用cp命令进行文件夹复制操作的时候需要添加选项&quot;-r&quot;，否则目录将会被忽略。 mv指令（move，剪切）也可以重命名 语法：#mv 需要移动的文档路径 需要保存的位置路径 作用：移动文档到新的位置 rm指令（remove,移除，删除） 语法：#rm 选项 需要移除的文档路径 选项： -f 强制删除（在删除的时候如果不带选项，会提示是否删除，如果确定Y，否则N） -r 删除一个文件夹 vim指令 vim是一款文本编辑器 语法：#vim 文件的路径 作用：打开一个文件，可以是存在，可以不存在 退出vim: shif + : + q 输出重定向 一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果保存到文件中进行后续的分析/统计，这时候需要使用到输出重定向技术。 &gt;: 覆盖输出 &gt;&gt;:追加输出 语法：#正常执行指令 &gt; 需要输出到的文件路径 age: ls -la &gt; ls.text cat指令 语法：#cat 文件的路径 语法：cat有直接打开一个文件的功能（只查看，不编辑） 进阶指令 df指令 语法：#df -h 作用：查看磁盘的空间 free指令 语法：#free -m (-m表示以mb为单位查看) 作用：查看内存使用情况 head指令 语法：#head -n 文件路径 作用：查看一个文件的前n行，不设置默认显示10行 tail指令 语法1：#tail -n 文件路径 n表示数字 作用：查看一个文件的后n行，如果不指定默认显示后10行 语法2：#tail -f 文件路径 作用：可以通过tail指令来查看一个文件的动态变化 （该命令一般用于查看系统的日志文件比较多） less 指令 语法：#less 文件路径 作用：查看文件，以较少的内容输出，按下辅助功能键查看更过 wc指令 语法：#wc -lwc 需要统计的文件路径 作用：统计文件内容信息（包括行数、单词数、字节数） -l:表示lines,行数 -w:表示words，单词数（依照空格来判读） -c:表示bytes,字节数 date指令 作用：表示操作时间日期（读取、设置）shell脚本 语法1: #date 输出形式：2018年3月24日 星期六 15：54：28 语法2： #date +%F 输出形式： 2018-3-24 （等价于#date &quot;+%Y-%m-%d&quot; ) 语法3：#date &quot;+%F%T&quot; 输出形式： 2018-3-24 16：01：00 （等价于#date &quot;+%Y-%m-%d %H-%M-%S&quot;) cal指令 作用：用来操作日历 语法1：#cal 直接输出当前月的的日历 语法2： #cal -3 表示输出上一个月、本月、下一个月的日历 语法3： #cal -y 表示输出某一年的日期 clear/ ctrl + L 指令 语法：clear 或者ctrl +l 作用：清除终端上已经存在的命令和结果 管道 | 作用：管道一般用于“过滤” 、“扩展出路 语法：管道不能单独使用，必须配合前面所讲的一些指令来一起使用 eg:需要通过管道查询当前目录下包含“y”字母的文档名称 #ls /|grep y eg:统计某个目录下的文档的总数个数 #ls / |wc -l 高级指令 hostname指令 作用：操作服务器的主机名 语法1：#hostname 表示输出完整的主机名 语法2：#hostname -f 表示输出当前主机名的权限定域名 id指令 作用：查看一个用户的一些基本信息（包含用户id，用户组id,附加组id);该指令如果不指定用户则默认当前用户 语法1：#id 默认显示当前执行该命令的用户的基本信息 语法2：#id 用户名 显示指定用户的基本信息 验证用户信息：通过文件/etc/passwd 验证用户组信息： /etc/group whoami 指令 作用：我是谁，显示当前登录的用户，一般用于shell脚本，用于获取当前操作的用户名，方便记录日志 ps指令 作用：查看服务器的进程信息 语法：ps -ef -e 表示列出全部的进程 -f 显示全部的列 UID:该进程的用户ID PID:进程ID PPID:该进程的父级进程ID，如果一个进程的父级进程找不到，该程序的进程称之为僵尸进程 C:CPU的占用率% STIME:进程的启动时间 Time:进程的执行时间 CMD:进程的名称或者对应的路径 top指令 作用：查看服务器的进程占用资源 语法： 进入命令：#top（动态显示） 退出命令：按下q键 PID:进程ID USER:该进程对应的用户 PR:优先级 S:表示进程的状态（sleeping) S表示睡 R运行 %CPU:CPU的占用 %MEM:内存的占用 Time:执行的时间 COMMAND:进程的名称或者路径 快捷键： 在运行top的时候（大写） M:按照内存降序 I:查看多核多处理 P:按照CPU使用率从高到低 du指令 作用：查看目录（文件夹）的真实大小 语法：#du -sh -s 显示汇总的大小 -h 表示以高可读性的形式进行显示 -find指令 作用：用于查找文件（可以搜索隐藏文件） 语法：#find 路径范围 选项 选项值 选项： -name: 按照文档的名称进行搜素（支持模糊搜索） -type: 按照文档的类型进行搜索 文档类型：&quot;-&quot;表示文件。&quot;d&quot;表示文件夹 eg :#find / -name httpd.conf #fing /etc/sane.d/ -type f service指令 （不是所有的软件都有服务） 作用：用于控制一些软件的服务启动、停止、重启 语法：#service 服务名 start/stop/restrart eg: 需要启动本机安装的Apache（网站服务器软件），其服务名http #service http start #ps -ef |grep http(查看该服务的进程) kill指令 作用：表示杀死进程（当遇到僵尸进程或者是出于某些原因需要关闭进程的时候) 语法：#kill 进程id ifconfig指令 作用：用于操作网卡的相关的指令 语法：#ifconfig reboot指令 作用:重新启动计算机 语法1：#reboot 重启 语法2：reboot -w 模拟重启，但是不重启 shutdown指令 作用：关机 语法：#shutdown -h now 如果想要取消关机计划的话，则可以按照以下方式进行尝试 1.针对centos 7.x之前的版本：ctrl + c 2.针对之后的版本： shutdown -c 除了shutdown 还有#init0 #halt #poweroff uptime指令 作用：输出计算机的持续在线时间 语法：uptime uname指令 作用：获取计算机操作系统的信息 语法：#uname #uname -a 比较详细 netstat指令 作用：查看网络的连接状态 语法：#netstat -tnlp man指令 语法：#man (退出按下q键)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux 学习笔记 指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一个博客]]></title>
    <url>%2F2019%2F04%2F02%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[自己写的第一篇博客，还是觉的挺好玩的。在这里我就简单介绍自己搭建博客的流程吧！ 博客框架的搭建 去nodejs官网下载。官网地址：nodejs.org（hexo需要nodejs的支持） 安装nodej，下一步在命令号终端输入：node -v 查看nodejs的版本，npm -v 查看包管理器的版本 利用npm下载淘宝的镜像源，终端指令：npm install -g cnpm –registr=https://registry.npm.taobao.org 进行安装 cnpm安装好后，输入cnpm -v 进行版本查看 用cnpm安装hexo博客框架：cnpm install -g hexo-cli 自动下载并进行安装，安装完成后可以用hexo -v来验证 在自定义的空间新建一个文件夹(pwd查看当前路径）命令：mkdir 文件名（blog) cd 进入到文件夹内部使用命令：sudo(windons系统安装git终端是不加sudo) hexo init进行博客初始化 初始化完成之后ls -l查看文件夹中的内容 hexo s启动博客服务，在浏览器中输入localhost:4000访问初始化好的博客（写好博客做预览用）。ctrl+c断开连接 在终端输入：hexo n “博客标题”，创建新的博客文章。会自动在该文件夹中sourse/_posts/新建一个文件（及博客文章），然后cd sourse/_posts/目录下ls -l查看文件 然后用vim编辑器进行文章编辑（基于makedown的语法编写)，保存退出。cd ../.. 退回到blog目录下 在终端输入：hexo clean清理一下，在输入：hexo g重新生成整个文件 如何将做好的博客部署到github上 登录自己的GitHub账号 新建一个仓库，仓库命名必须符合一定格式（昵称名.github.io）点击create repository完成仓库新建（部署完成后通过昵称名.github.io进行访问） 在blog目录下装一个git插件。命令：cnpm install –save hexo-deployer-git安装该工具 设置blog下的_config.yml文件；vim _config.yml 在文件的底部Deployment下写入：deploy: type: git repo: https://github.com/CodeXSL/CodeXSL.github.io.git branch: master 写入完成后在终端输入：hexo d 将本地博客文件部署到GitHub上。在部署过程会提示输入GitHub的账号和密码 部署完成后再浏览器输入CodeXSL.github.io进行访问 如何自定义一个博客主题 在blog目录下载所需主题 git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia (将下载好的主题放在该目录下) cd themes目录下可以ls -l进行查看 退回到blog目录下，vim _config.yml进行主题修改 theme： yilia 保存退出 hexo clean ;hexo g 重新生成一下 hexo d 将本地博客重新部署到Github上]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>博客 博客搭建 博客设置</tag>
      </tags>
  </entry>
</search>
